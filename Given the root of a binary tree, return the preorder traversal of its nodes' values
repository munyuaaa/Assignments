#include <iostream>
#include <vector>
#include <stack>

struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

class Solution {
public:
    std::vector<int> preorderTraversal(TreeNode* root) {
        std::vector<int> result;
        if (!root) return result; // Return empty if tree is empty
        
        std::stack<TreeNode*> stack;
        stack.push(root);
        
        while (!stack.empty()) {
            TreeNode* node = stack.top();
            stack.pop();
            result.push_back(node->val); // Visit the root
            
            // Push right child first so that left child is processed next
            if (node->right) {
                stack.push(node->right);
            }
            if (node->left) {
                stack.push(node->left);
            }
        }
        
        return result;
    }
};

// Example usage
int main() {
    // Constructing the tree: 
    //       1
    //        \
    //         2
    //        /
    //       3
    TreeNode* root = new TreeNode(1);
    root->right = new TreeNode(2);
    root->right->left = new TreeNode(3);
    
    // Create a Solution object and get the preorder traversal
    Solution solution;
    std::vector<int> result = solution.preorderTraversal(root);
    
    // Output the result using a traditional for loop
    std::cout << "Preorder Traversal: ";
    for (size_t i = 0; i < result.size(); ++i) {
        std::cout << result[i] << " "; // Output: 1 2 3
    }
    std::cout << std::endl;

    // Clean up memory
    delete root->right->left; // Delete node 3
    delete root->right;       // Delete node 2
    delete root;              // Delete root node 1

    return 0;
}
